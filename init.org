#+TITLE: Emacs 24 configuration for Aaron Bedra
#+AUTHOR: Aaron Bedra
#+EMAIL: aaron@aaronbedra.com
#+OPTIONS: toc:3 num:nil

* Configuration
** Whoami
#+begin_src emacs-lisp
  (setq user-full-name "Aaron Bedra")
  (setq user-mail-address "aaron@aaronbedra.com")
#+end_src
** Require a common lisp mode
#+begin_src emacs-lisp
  (require 'cl)
#+end_src
** Load package management and set package archives
#+begin_src emacs-lisp
  (load "package")
  (package-initialize)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)

  (setq package-archive-enable-alist '(("melpa" deft magit)))
#+end_src
*** Define default packages
#+begin_src emacs-lisp
  (defvar ab/packages '(clojure-mode
                        coffee-mode
                        deft
                        go-mode
                        gist
                        haml-mode
                        htmlize
                        magit
                        markdown-mode
                        marmalade
                        org
                        paredit
                        smex
                        yaml-mode)
    "Default packages")
#+end_src
*** Install default packages
#+begin_src emacs-lisp
  (defun ab/packages-installed-p ()
    (loop for pkg in ab/packages
          when (not (package-installed-p pkg)) do (return nil)
          finally (return t)))

  (unless (ab/packages-installed-p)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (dolist (pkg ab/packages)
      (when (not (package-installed-p pkg))
        (package-install pkg))))
#+end_src
** Set startup options
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t
        echo-keystrokes 0.1
        use-dialog-box nil
        visible-bell t)

  (setq-default indicate-empty-lines t)
  (transient-mark-mode t)
  (delete-selection-mode t)
  (show-paren-mode t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (when (not indicate-empty-lines)
    (toggle-indicate-empty-lines))

  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))
#+end_src
** Dropbox options
#+begin_src emacs-lisp
  (setq deft-directory "~/Dropbox/deft")
  (setq deft-use-filename-as-title t)
  (setq deft-extension "org")
  (setq deft-text-mode 'org-mode)
#+end_src
** Smex
#+begin_src emacs-lisp
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize)
#+end_src
** Ido
#+begin_src emacs-lisp
  (ido-mode t)
  (setq ido-enable-flex-matching t
        ido-use-virtual-buffers t)
#+end_src
** Ack
#+begin_src emacs-lisp
  (setq ack-prompt-for-directory t)
  (setq ack-executable (executable-find "ack-grep"))
#+end_src
** Column number mode
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src
** Temporary file management
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src
** Power lisp
#+begin_src emacs-lisp
  (setq lisp-modes '(lisp-mode
                     emacs-lisp-mode
                     common-lisp-mode
                     scheme-mode
                     clojure-mode))

  (defvar lisp-power-map (make-keymap))
  (define-minor-mode lisp-power-mode "Fix keybindings; add power."
    :lighter " (power)"
    :keymap lisp-power-map
    (paredit-mode t))
  (define-key lisp-power-map [delete] 'paredit-forward-delete)
  (define-key lisp-power-map [backspace] 'paredit-backward-delete)

  (defun ab/engage-lisp-power ()
    (lisp-power-mode t))

  (dolist (mode lisp-modes)
    (add-hook (intern (format "%s-hook" mode))
              #'ab/engage-lisp-power))
#+end_src
** Ruby mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.Capfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.Vagrantfile$" . ruby-mode))
#+end_src
** Yaml mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
#+end_src
** Key bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src
